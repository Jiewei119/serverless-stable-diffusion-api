// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package handler

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/devsapp/serverless-stable-diffusion-api/pkg/module"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// cancel predict task
	// (GET /cancel)
	GetCancel(c *gin.Context, params module.GetCancelParams)
	// get predict progress
	// (GET /getResult)
	GetGetResult(c *gin.Context, params module.GetGetResultParams)
	// get batch result
	// (POST /getResults)
	PostGetResults(c *gin.Context)
	// img to img predict
	// (POST /img2img)
	Img2Img(c *gin.Context)
	// list model
	// (GET /models)
	ListModel(c *gin.Context)
	// upload model
	// (POST /models)
	UploadModel(c *gin.Context)
	// delete model
	// (DELETE /models/{model_name})
	DeleteModel(c *gin.Context, modelName string)
	// get model info
	// (GET /models/{model_name})
	GetModel(c *gin.Context, modelName string)
	// update model
	// (PUT /models/{model_name})
	UpdateModel(c *gin.Context, modelName string)
	// get predict progress
	// (GET /progress)
	GetProgress(c *gin.Context, params module.GetProgressParams)
	// txt to img predict
	// (POST /txt2img)
	Txt2Img(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetCancel operation middleware
func (siw *ServerInterfaceWrapper) GetCancel(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params module.GetCancelParams

	// ------------- Required query parameter "taskId" -------------

	if paramValue := c.Query("taskId"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument taskId is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "taskId", c.Request.URL.Query(), &params.TaskId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter taskId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCancel(c, params)
}

// GetGetResult operation middleware
func (siw *ServerInterfaceWrapper) GetGetResult(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params module.GetGetResultParams

	// ------------- Required query parameter "taskId" -------------

	if paramValue := c.Query("taskId"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument taskId is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "taskId", c.Request.URL.Query(), &params.TaskId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter taskId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGetResult(c, params)
}

// PostGetResults operation middleware
func (siw *ServerInterfaceWrapper) PostGetResults(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostGetResults(c)
}

// Img2Img operation middleware
func (siw *ServerInterfaceWrapper) Img2Img(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Img2Img(c)
}

// ListModel operation middleware
func (siw *ServerInterfaceWrapper) ListModel(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListModel(c)
}

// UploadModel operation middleware
func (siw *ServerInterfaceWrapper) UploadModel(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UploadModel(c)
}

// DeleteModel operation middleware
func (siw *ServerInterfaceWrapper) DeleteModel(c *gin.Context) {

	var err error

	// ------------- Path parameter "model_name" -------------
	var modelName string

	err = runtime.BindStyledParameter("simple", false, "model_name", c.Param("model_name"), &modelName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter model_name: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteModel(c, modelName)
}

// GetModel operation middleware
func (siw *ServerInterfaceWrapper) GetModel(c *gin.Context) {

	var err error

	// ------------- Path parameter "model_name" -------------
	var modelName string

	err = runtime.BindStyledParameter("simple", false, "model_name", c.Param("model_name"), &modelName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter model_name: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetModel(c, modelName)
}

// UpdateModel operation middleware
func (siw *ServerInterfaceWrapper) UpdateModel(c *gin.Context) {

	var err error

	// ------------- Path parameter "model_name" -------------
	var modelName string

	err = runtime.BindStyledParameter("simple", false, "model_name", c.Param("model_name"), &modelName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter model_name: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateModel(c, modelName)
}

// GetProgress operation middleware
func (siw *ServerInterfaceWrapper) GetProgress(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params module.GetProgressParams

	// ------------- Required query parameter "taskId" -------------

	if paramValue := c.Query("taskId"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument taskId is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "taskId", c.Request.URL.Query(), &params.TaskId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter taskId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProgress(c, params)
}

// Txt2Img operation middleware
func (siw *ServerInterfaceWrapper) Txt2Img(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Txt2Img(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/cancel", wrapper.GetCancel)
	router.GET(options.BaseURL+"/getResult", wrapper.GetGetResult)
	router.POST(options.BaseURL+"/getResults", wrapper.PostGetResults)
	router.POST(options.BaseURL+"/img2img", wrapper.Img2Img)
	router.GET(options.BaseURL+"/models", wrapper.ListModel)
	router.POST(options.BaseURL+"/models", wrapper.UploadModel)
	router.DELETE(options.BaseURL+"/models/:model_name", wrapper.DeleteModel)
	router.GET(options.BaseURL+"/models/:model_name", wrapper.GetModel)
	router.PUT(options.BaseURL+"/models/:model_name", wrapper.UpdateModel)
	router.GET(options.BaseURL+"/progress", wrapper.GetProgress)
	router.POST(options.BaseURL+"/txt2img", wrapper.Txt2Img)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xaX2/bNhD/KoK2R7fJ0je/rdtQBFixIOueioKgpZPMliLV48mxV/i7DyT1x7Ikm1qT",
	"wi3yFFm84/35kaffkfkSJ7ootQJFJl5+iU2yhoK7xz8QNdqHEnUJSALc60SnYP+mYBIUJQmt4qUXjtzY",
	"Is40FpziZSwUvbqJFzHtSvA/IQeM94u4AGN4PjlRM9yqGkKh8ni/X8QInyuBkMbL93FtsBH/sF/Eb4Bu",
	"C56DuYfPFRgaRkDcfLpN7ZMgKPyrvpXWLEfku4HVegJrzZkamhDOgzkmFgdunY65lls0Rlo37sGUWpkR",
	"d1JOvOfMzwhZvIx/uurQv6qhv/IhjThoiFPl1M8CfOSys99O4B3Ob26LfBIjLh/4zmjF/No4zKBefYSE",
	"rEMrTsmaGfEvBDm1iJMsZybhMlQ+BaWFESpnhhBUTuueYiY1p05RVcWq1tNMaWKGb4DlKA5BXWktgatj",
	"KcOLUoIZFwSPXoDDaxD5mgKF3fphc3MiVCKrFJhQgli3zodeHwmEbwSrKLhkNvfAikqSKKUADHaw5EIR",
	"yyopGU5715diJU9T69AsI3ZpZELK+VoFN5+YUBvAULisxmj+3FQrWeGMiZw8287W2AVqKCYoGDEFOSex",
	"AVaiLkoaDVJvAFGkwAyQTeB4RRhIWWhJIzCeEeADx3RiPZwwjWBLDCvqD19AQI3RjCdT68+wZF2hCpzQ",
	"sEIoVqlEqzRYxe2fYGkq+HaGsAh23VU2ZEKlsB3NbyOheAETAhtgqcDpwVN1yH9BGMd8Zh2qFafdStmG",
	"TwwBBOMEkLJ6iWWoC7b+v4oPwYoqPZ0x4itpM55llRFauaUvxwMlKE2oXdrJud8CU63m5NJLj3+tp9VI",
	"yLryD3PxINLAeY44z0QS22XTY0FTxA0QWWHyidQ3dGyYxblU8oCZvW2w5lL+lcXL96fZohN/zY1ljAPv",
	"iedDhk9riLQxkR2NdBbZ301uBpFIbuitTkUmEm7134kCxqe0knaeVjQiUcBZAwi5MAQI6fTUnUzYnB0y",
	"w7mcUuQlFu3MQuWLSGqetg+QRhqjSvnns42QS/UBji2SDprBumpqWt8/75sbG4lKG3PH/V4YB7TktD6b",
	"G/9i3LIbOxdpLVR72Thl471DnSMYU2+nkda1QgRFbc82cA443YN0XCSM6Je1yTBpiw6M8pbH3MutT65x",
	"aONZ9MO3CXu3pecmLLgJU66er/Fre7RMoKFyzQ2wWe3agV74R2lmS7hGFkLG13hmtKYl23CztcYuXOMs",
	"bbQyM9aZFQdLsFnJjWFzmM0aWVU6W+Mc9Qfrhp57m++kt+mWwnNv89zbfLvepi0gPZZxMU3O3h3FZXrI",
	"Qw3gBlCCMS98jC/aGF88wKoSUYmQioSiX+9ubZ4E2e9L/PcDz3PAZjRexBtA4+f85eX1y2tXjktQvBTx",
	"Mn7lXi1iy5hdcFcJV4lfhjm4umsT5NoYG2L8Bug3L2GVkBdAgMY1Z0dcnJtPkXC3A/bn5wpw17DlZZeK",
	"Lj+EFSzqa5+xXH5wFd8h5zy9ub4eps173+amYaCRqZLEMlHH4jJeSfI3SIpAuUdelrJu164+Gq26K6hz",
	"txT+dspB2felUrAtISFII6hl7OYpCo67oas2I07iKge6B1O7OAXCm1boQnB4lFz2b49GcpoDtRlDF/8l",
	"QnvoZdsE9bH1TaE2I+jeadPBa2pswNBrne4eLbTB5eS+X63sKtg/Ix2CtOs7ax89yqLIb0SRT0NcH7c9",
	"EbZHV5rfHNn+UeJIUk21KkQH7wXiKoo8Ih3ZP82X1CHr6IWZLMx/CndI6L6OX5XgoPtxb2n4PwKDYKXw",
	"J5IgIy7lJeW588w1e/Vm6U/hGZyHw/8rRj/p/5RS87RL++NvqIOj5WGEPq9CpToO3GZHGXLu1/Bgu2su",
	"B6NDBw93wdUX99e1bnsflwR/rNgH6Hf3vgHoJFuxc0U6a09tHWex5LSjLJ3Rx6ePVZlygkssSD633VaZ",
	"4oWXmeXH24VTVKG+zbhMhtCUiEy7KlfR5MprEDmucHbwEqB9otr6NHX1UvdyD2tXUA9vb6Z29l13m/Lj",
	"NHzHN2VnGoFL7uenmz7a0ul2oD6YeiL2cnS59o3bgeNDt++yHaAtDduB/f6/AAAA//9zEYSRtCwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
